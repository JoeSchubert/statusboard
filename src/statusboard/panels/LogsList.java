package statusboard.panels;

import java.io.File;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.TableRowSorter;
import static statusboard.StatusBoardFrame.backgroundColor;
import static statusboard.StatusBoardFrame.foregroundColor;
import statusboard.TableColumnAdjuster;
import statusboard.databaseHelpers.LoggingDataBaseHelper;
import statusboard.models.LogsListModel;

/**
 *
 * @author joe
 */
public class LogsList extends javax.swing.JPanel {

    private final JDialog jdg;
    private final LogsListModel logsListModel;
    private final TableRowSorter<LogsListModel> sorter;

    /**
     * Creates new form UserList
     *
     * @param jdiag
     */
    public LogsList(JDialog jdiag) {
        jdg = jdiag;
        logsListModel = new LogsListModel();
        initComponents();
        logsListTable.setAutoResizeMode(0);
        logsListTable.setOpaque(false);
        sorter = new TableRowSorter<>(logsListModel);
        logsListTable.setRowSorter(sorter);

        jdg.pack();
        setupColors();
        logsListTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        TableColumnAdjuster tca = new TableColumnAdjuster(logsListTable, true);
        tca.adjustColumns();
        jdg.setLocationRelativeTo(null);
        jdg.setVisible(true);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        logsListTable = new javax.swing.JTable();
        filterText = new javax.swing.JTextField();
        filterButton = new javax.swing.JButton();
        clearFilterButton = new javax.swing.JButton();
        exportLogsButton = new javax.swing.JButton();

        logsListTable.setModel(logsListModel);
        logsListTable.setColumnSelectionAllowed(true);
        logsListTable.setOpaque(false);
        logsListTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        logsListTable.setShowVerticalLines(false);
        logsListTable.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(logsListTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 774, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        filterText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterTextActionPerformed(evt);
            }
        });

        filterButton.setText("Filter");
        filterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filterButtonActionPerformed(evt);
            }
        });

        clearFilterButton.setText("Clear Filter");
        clearFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearFilterButtonActionPerformed(evt);
            }
        });

        exportLogsButton.setText("Export Logs");
        exportLogsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportLogsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(filterText, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(filterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearFilterButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(exportLogsButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(filterText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(filterButton)
                    .addComponent(clearFilterButton)
                    .addComponent(exportLogsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void filterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterButtonActionPerformed
        filterLogs();
    }//GEN-LAST:event_filterButtonActionPerformed

    private void clearFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearFilterButtonActionPerformed
        clearFilter();
    }//GEN-LAST:event_clearFilterButtonActionPerformed

    private void filterTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filterTextActionPerformed
        filterLogs();
    }//GEN-LAST:event_filterTextActionPerformed

    private void exportLogsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportLogsButtonActionPerformed
        // TODO add your handling code here:
        final JFileChooser chooser = new JFileChooser( new File(System.getProperty("user.home")) )
        {  
            @Override
            public void approveSelection()
            {
                if (getSelectedFile().exists())
                {
                    int n = JOptionPane.showConfirmDialog(
                        this,
                        "Do You Want to Overwrite File?",
                        "Confirm Overwrite",
                        JOptionPane.YES_NO_OPTION);

                    if (n == JOptionPane.YES_OPTION)
                        super.approveSelection();
                }
                else
                    super.approveSelection();
            }
        };
        
        FileNameExtensionFilter filter = new FileNameExtensionFilter("CSV Files", "csv");
        chooser.setFileFilter(filter);
        chooser.setSelectedFile( new File("LogExport.csv") );
        int returnVal = chooser.showSaveDialog(null);

        if(returnVal == JFileChooser.APPROVE_OPTION)
        {
            LoggingDataBaseHelper db = LoggingDataBaseHelper.getInstance();
            String filePath = chooser.getSelectedFile().toString();
            if (filePath.substring(filePath.length() - 4).equalsIgnoreCase(".csv")) {
                db.saveLog(new File(filePath));
            } else{
                db.saveLog(new File(filePath + ".csv"));
            }
        }
    }//GEN-LAST:event_exportLogsButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearFilterButton;
    private javax.swing.JButton exportLogsButton;
    private javax.swing.JButton filterButton;
    private javax.swing.JTextField filterText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable logsListTable;
    // End of variables declaration//GEN-END:variables

    private void filterLogs() {
        RowFilter<LogsListModel, Object> rf;
        try {
            rf = RowFilter.regexFilter("(?i)" + filterText.getText());
        } catch (java.util.regex.PatternSyntaxException e) {
            return;
        }
        sorter.setRowFilter(rf);
    }

    private void clearFilter() {
        sorter.setRowFilter(null);
        filterText.setText("");
    }

    private void setupColors() {
        this.setBackground(backgroundColor);
        jdg.setBackground(backgroundColor);
        jdg.setForeground(foregroundColor);
        jPanel1.setBackground(backgroundColor);
        jPanel1.setForeground(foregroundColor);
        clearFilterButton.setBackground(backgroundColor);
        clearFilterButton.setForeground(foregroundColor);
        filterButton.setBackground(backgroundColor);
        filterButton.setForeground(foregroundColor);
        exportLogsButton.setBackground(backgroundColor);
        exportLogsButton.setForeground(foregroundColor);
        jScrollPane1.setBackground(backgroundColor);
        jScrollPane1.setForeground(foregroundColor);
        jScrollPane1.getViewport().setBackground(backgroundColor);
        logsListTable.setBackground(backgroundColor);
        logsListTable.setForeground(foregroundColor);
        jScrollPane1.setBackground(backgroundColor);
        jScrollPane1.setForeground(foregroundColor);
        filterText.setBackground(backgroundColor);
        filterText.setForeground(foregroundColor);
        logsListTable.setOpaque(false);
        logsListTable.getTableHeader().setBackground(backgroundColor);
        logsListTable.getTableHeader().setForeground(foregroundColor);
    }

}
