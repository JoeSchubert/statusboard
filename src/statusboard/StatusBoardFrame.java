package statusboard;

import java.awt.Color;
import java.awt.Component;
import java.awt.KeyEventDispatcher;
import java.awt.event.KeyEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.SimpleDateFormat;
import java.time.LocalTime;
import java.util.Date;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JToggleButton;
import javax.swing.UIManager;
import javax.swing.plaf.UIResource;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import statusboard.databaseHelpers.RosterDataBaseHelper;
import statusboard.models.*;
import statusboard.panels.AddEditMember;
import statusboard.panels.UserList;
import statusboard.panels.LogsList;
import statusboard.shell.LaptopScreenBrightness;

public final class StatusBoardFrame extends javax.swing.JFrame implements KeyEventDispatcher {

    private static RosterDataBaseHelper DB;
    private final static Constants CON = new Constants();
    private static StringBuilder keyInput = new StringBuilder();
    private AddEditMember aem;
    private UserList userList;
    private LogsList logsList;
    private final JDialog jdg = new JDialog();
    public static Color backgroundColor = UIManager.getColor("Panel.background");
    public static Color foregroundColor = UIManager.getColor(Color.BLACK);
    private static Settings settings;
    private static long initialKeyEventTime = 0;
    private static int scannerTimeThreshold; // Time in milliseconds that the scanner should send it's input within
    private static boolean dimmed = false;
    private static Color lastScanColor = Color.GREEN;

    private final CrewListModel coModel, xoModel, officerModel, chiefModel, engineeringModel, operationsModel, deckModel, supportModel, tdyModel;

    /**
     * Creates new form StatusBoardFrame
     */
    public StatusBoardFrame() {
        DB = RosterDataBaseHelper.getInstance();
        settings = Settings.getInstance();
        scannerTimeThreshold = settings.getScannerTimeThreshold();
        coModel = new CrewListModel(CON.COMMANDING_OFFICER);
        xoModel = new CrewListModel(CON.EXECUTIVE_OFFICER);
        officerModel = new CrewListModel(CON.OFFICERS);
        chiefModel = new CrewListModel(CON.CHIEFS);
        engineeringModel = new CrewListModel(CON.ENGINEERING);
        operationsModel = new CrewListModel(CON.OPERATIONS);
        deckModel = new CrewListModel(CON.DECK);
        supportModel = new CrewListModel(CON.SUPPORT);
        tdyModel = new CrewListModel(CON.TDY);
        LaptopScreenBrightness lsb = new LaptopScreenBrightness();

        initComponents();
        //this.setExtendedState(JFrame.MAXIMIZED_BOTH);

        setupTablesLAF();
        setupColors();
        String cutterName = settings.getCutterName();
        cutterLabel.setText(cutterName);
        this.setTitle(cutterName);
        setNumberAfloatLabel(DB.getNumberAfloat());
        nightModeToggle.setSelected(settings.getNightMode());

        final ScheduledExecutorService executorService = Executors.newSingleThreadScheduledExecutor();
        executorService.scheduleAtFixedRate(() -> {
            Date date = new Date();
            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
            timeLabel.setText(sdf.format(date));
            if (settings.autoDimEnabled()) {
                String nowString = new SimpleDateFormat("HH:mm:ss").format(date);
                LocalTime target = LocalTime.parse(nowString);
                // ensure the time falls at night between the specified hours
                if (target.isAfter(settings.getStartDim()) && target.isBefore(settings.getStopDim())) {
                    //only try to change the brightness if it hasn't already been changed.
                    if (!dimmed) {
                        dimmed = true;
                        lsb.setBrightness(settings.getDimPercent());
                    }
                } else if (dimmed) {
                    dimmed = false;
                    lsb.setBrightness(100);
                }
            }
        }, 0, 1, TimeUnit.SECONDS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        commandingOfficerLabel = new javax.swing.JLabel();
        commandingOfficerJScrollPane = new javax.swing.JScrollPane();
        coTable = new javax.swing.JTable();
        executiveOfficerLabel = new javax.swing.JLabel();
        executiveOfficerJScrollPane = new javax.swing.JScrollPane();
        xoTable = new javax.swing.JTable();
        officersLabel = new javax.swing.JLabel();
        officersJScrollPane = new javax.swing.JScrollPane();
        officersTable = new javax.swing.JTable();
        chiefsLabel = new javax.swing.JLabel();
        engineeringJScrollPane = new javax.swing.JScrollPane();
        engineeringTable = new javax.swing.JTable();
        lastScanLabel = new javax.swing.JLabel();
        lastScanNameLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        chiefsJScrollPane = new javax.swing.JScrollPane();
        chiefsTable = new javax.swing.JTable();
        operationsJScrollPane = new javax.swing.JScrollPane();
        operationsTable = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        deckJScrollPane = new javax.swing.JScrollPane();
        deckTable = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        supportJScrollPane = new javax.swing.JScrollPane();
        supportTable = new javax.swing.JTable();
        cutterLabel = new javax.swing.JLabel();
        managerUsersButton = new javax.swing.JButton();
        logsButton = new javax.swing.JButton();
        lastScanTimeLabel = new javax.swing.JLabel();
        timeLabel = new javax.swing.JLabel();
        nightModeToggle = new javax.swing.JToggleButton();
        numberAfloat = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        supportJScrollPane1 = new javax.swing.JScrollPane();
        tdyTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        commandingOfficerLabel.setText("Commanding Officer");
        commandingOfficerLabel.setMaximumSize(new java.awt.Dimension(165, 15));

        coTable.setAutoCreateRowSorter(true);
        coTable.setModel(coModel);
        coTable.setAutoscrolls(false);
        coTable.setMaximumSize(new java.awt.Dimension(165, 15));
        coTable.setMinimumSize(new java.awt.Dimension(140, 15));
        coTable.setName("coTable"); // NOI18N
        coTable.setOpaque(false);
        coTable.setRowSelectionAllowed(false);
        coTable.setShowHorizontalLines(false);
        coTable.setShowVerticalLines(false);
        coTable.setTableHeader(null);
        coTable.setUpdateSelectionOnSort(false);
        commandingOfficerJScrollPane.setViewportView(coTable);

        executiveOfficerLabel.setText("Executive Officer");
        executiveOfficerLabel.setMaximumSize(new java.awt.Dimension(165, 15));
        executiveOfficerLabel.setMinimumSize(new java.awt.Dimension(140, 15));

        executiveOfficerJScrollPane.setMaximumSize(new java.awt.Dimension(165, 15));
        executiveOfficerJScrollPane.setMinimumSize(new java.awt.Dimension(140, 15));

        xoTable.setAutoCreateRowSorter(true);
        xoTable.setModel(xoModel);
        xoTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        xoTable.setAutoscrolls(false);
        xoTable.setName("xoTable"); // NOI18N
        xoTable.setOpaque(false);
        xoTable.setRowSelectionAllowed(false);
        xoTable.setShowHorizontalLines(false);
        xoTable.setShowVerticalLines(false);
        xoTable.setTableHeader(null);
        xoTable.setUpdateSelectionOnSort(false);
        executiveOfficerJScrollPane.setViewportView(xoTable);

        officersLabel.setText("Officers");
        officersLabel.setMaximumSize(new java.awt.Dimension(165, 15));
        officersLabel.setMinimumSize(new java.awt.Dimension(140, 15));
        officersLabel.setName("officersLabel"); // NOI18N

        officersTable.setAutoCreateRowSorter(true);
        officersTable.setModel(officerModel);
        officersTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        officersTable.setAutoscrolls(false);
        officersTable.setEditingColumn(0);
        officersTable.setMaximumSize(new java.awt.Dimension(165, 15));
        officersTable.setMinimumSize(new java.awt.Dimension(140, 15));
        officersTable.setName("officersTable"); // NOI18N
        officersTable.setOpaque(false);
        officersTable.setRowSelectionAllowed(false);
        officersTable.setShowHorizontalLines(false);
        officersTable.setShowVerticalLines(false);
        officersTable.setTableHeader(null);
        officersTable.setUpdateSelectionOnSort(false);
        officersJScrollPane.setViewportView(officersTable);

        chiefsLabel.setText("Chiefs");
        chiefsLabel.setMaximumSize(new java.awt.Dimension(165, 15));
        chiefsLabel.setMinimumSize(new java.awt.Dimension(140, 15));
        chiefsLabel.setName("chiefsLabel"); // NOI18N

        engineeringTable.setAutoCreateRowSorter(true);
        engineeringTable.setModel(engineeringModel);
        engineeringTable.setAutoscrolls(false);
        engineeringTable.setMaximumSize(new java.awt.Dimension(165, 15));
        engineeringTable.setMinimumSize(new java.awt.Dimension(140, 15));
        engineeringTable.setName("engineeringTable"); // NOI18N
        engineeringTable.setOpaque(false);
        engineeringTable.setRowSelectionAllowed(false);
        engineeringTable.setShowHorizontalLines(false);
        engineeringTable.setShowVerticalLines(false);
        engineeringTable.setTableHeader(null);
        engineeringTable.setUpdateSelectionOnSort(false);
        engineeringJScrollPane.setViewportView(engineeringTable);

        lastScanLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lastScanLabel.setText("Last Scan");
        lastScanLabel.setFocusable(false);
        lastScanLabel.setName("lastScanLabel"); // NOI18N

        lastScanNameLabel.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        lastScanNameLabel.setName("lastScanName"); // NOI18N

        jLabel1.setText("Engineering");
        jLabel1.setMaximumSize(new java.awt.Dimension(165, 15));
        jLabel1.setMinimumSize(new java.awt.Dimension(140, 15));

        chiefsTable.setAutoCreateRowSorter(true);
        chiefsTable.setModel(chiefModel);
        chiefsTable.setAutoscrolls(false);
        chiefsTable.setMaximumSize(new java.awt.Dimension(165, 15));
        chiefsTable.setMinimumSize(new java.awt.Dimension(140, 15));
        chiefsTable.setName("chiefsTable"); // NOI18N
        chiefsTable.setOpaque(false);
        chiefsTable.setRowSelectionAllowed(false);
        chiefsTable.setShowHorizontalLines(false);
        chiefsTable.setShowVerticalLines(false);
        chiefsTable.setTableHeader(null);
        chiefsTable.setUpdateSelectionOnSort(false);
        chiefsJScrollPane.setViewportView(chiefsTable);

        operationsTable.setAutoCreateRowSorter(true);
        operationsTable.setModel(operationsModel);
        operationsTable.setAutoscrolls(false);
        operationsTable.setMaximumSize(new java.awt.Dimension(165, 15));
        operationsTable.setMinimumSize(new java.awt.Dimension(140, 15));
        operationsTable.setName("chiefsTable"); // NOI18N
        operationsTable.setOpaque(false);
        operationsTable.setRowSelectionAllowed(false);
        operationsTable.setShowHorizontalLines(false);
        operationsTable.setShowVerticalLines(false);
        operationsTable.setTableHeader(null);
        operationsTable.setUpdateSelectionOnSort(false);
        operationsJScrollPane.setViewportView(operationsTable);

        jLabel2.setText("Operations");
        jLabel2.setMaximumSize(new java.awt.Dimension(165, 15));
        jLabel2.setMinimumSize(new java.awt.Dimension(140, 15));

        deckTable.setAutoCreateRowSorter(true);
        deckTable.setModel(deckModel);
        deckTable.setAutoscrolls(false);
        deckTable.setMaximumSize(new java.awt.Dimension(165, 15));
        deckTable.setMinimumSize(new java.awt.Dimension(140, 15));
        deckTable.setName("chiefsTable"); // NOI18N
        deckTable.setOpaque(false);
        deckTable.setRowSelectionAllowed(false);
        deckTable.setShowHorizontalLines(false);
        deckTable.setShowVerticalLines(false);
        deckTable.setTableHeader(null);
        deckTable.setUpdateSelectionOnSort(false);
        deckJScrollPane.setViewportView(deckTable);

        jLabel3.setText("Deck");
        jLabel3.setMaximumSize(new java.awt.Dimension(165, 15));
        jLabel3.setMinimumSize(new java.awt.Dimension(140, 15));

        jLabel4.setText("Support");
        jLabel4.setMaximumSize(new java.awt.Dimension(165, 15));
        jLabel4.setMinimumSize(new java.awt.Dimension(140, 15));

        supportTable.setAutoCreateRowSorter(true);
        supportTable.setModel(supportModel);
        supportTable.setAutoscrolls(false);
        supportTable.setMaximumSize(new java.awt.Dimension(165, 15));
        supportTable.setMinimumSize(new java.awt.Dimension(140, 15));
        supportTable.setName("chiefsTable"); // NOI18N
        supportTable.setOpaque(false);
        supportTable.setRowSelectionAllowed(false);
        supportTable.setShowHorizontalLines(false);
        supportTable.setShowVerticalLines(false);
        supportTable.setTableHeader(null);
        supportTable.setUpdateSelectionOnSort(false);
        supportJScrollPane.setViewportView(supportTable);

        cutterLabel.setFont(new java.awt.Font("Dialog", 1, 30)); // NOI18N
        cutterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        cutterLabel.setMinimumSize(new java.awt.Dimension(600, 50));
        cutterLabel.setName("cutterLabel"); // NOI18N

        managerUsersButton.setText("Manage Users");
        managerUsersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                managerUsersButtonActionPerformed(evt);
            }
        });

        logsButton.setText("Logs");
        logsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logsButtonActionPerformed(evt);
            }
        });

        lastScanTimeLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        lastScanTimeLabel.setToolTipText("");

        timeLabel.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        timeLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        timeLabel.setText("Current Time");

        nightModeToggle.setText("Night Mode");
        nightModeToggle.setAlignmentY(0.0F);
        nightModeToggle.setMargin(new java.awt.Insets(2, 6, 2, 6));
        nightModeToggle.setMaximumSize(new java.awt.Dimension(126, 31));
        nightModeToggle.setMinimumSize(new java.awt.Dimension(126, 31));
        nightModeToggle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nightModeToggleActionPerformed(evt);
            }
        });

        numberAfloat.setText("On-board: XX");

        jLabel5.setText("TDY");
        jLabel5.setMaximumSize(new java.awt.Dimension(165, 15));
        jLabel5.setMinimumSize(new java.awt.Dimension(140, 15));

        tdyTable.setAutoCreateRowSorter(true);
        tdyTable.setModel(tdyModel);
        tdyTable.setAutoscrolls(false);
        tdyTable.setMaximumSize(new java.awt.Dimension(165, 15));
        tdyTable.setMinimumSize(new java.awt.Dimension(140, 15));
        tdyTable.setName("tdyTable");
        tdyTable.setOpaque(false);
        tdyTable.setRowSelectionAllowed(false);
        tdyTable.setShowHorizontalLines(false);
        tdyTable.setShowVerticalLines(false);
        tdyTable.setTableHeader(null);
        tdyTable.setUpdateSelectionOnSort(false);
        supportJScrollPane1.setViewportView(tdyTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(officersJScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(officersLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(commandingOfficerJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(commandingOfficerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(executiveOfficerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                            .addComponent(executiveOfficerJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(chiefsLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chiefsJScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(lastScanLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastScanTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lastScanNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cutterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(engineeringJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(operationsJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(deckJScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(supportJScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE)
                            .addComponent(supportJScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 140, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(timeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(numberAfloat, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(logsButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(managerUsersButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nightModeToggle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(commandingOfficerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(executiveOfficerLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(commandingOfficerJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(executiveOfficerJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(12, 12, 12))
                    .addComponent(cutterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(officersLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(chiefsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(chiefsJScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 415, Short.MAX_VALUE)
                                    .addComponent(officersJScrollPane))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 56, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lastScanLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lastScanTimeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addComponent(lastScanNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8))
                            .addComponent(engineeringJScrollPane)
                            .addComponent(operationsJScrollPane)
                            .addComponent(deckJScrollPane)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(supportJScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(logsButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(managerUsersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(supportJScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(nightModeToggle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberAfloat)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void nightModeToggleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nightModeToggleActionPerformed
        settings.setNightMode(nightModeToggle.isSelected());
        setupColors();
    }//GEN-LAST:event_nightModeToggleActionPerformed

    private void logsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logsButtonActionPerformed
        displayLogList();
    }//GEN-LAST:event_logsButtonActionPerformed

    private void managerUsersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_managerUsersButtonActionPerformed
        displayUserList();
    }//GEN-LAST:event_managerUsersButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane chiefsJScrollPane;
    private javax.swing.JLabel chiefsLabel;
    private javax.swing.JTable chiefsTable;
    private javax.swing.JTable coTable;
    private javax.swing.JScrollPane commandingOfficerJScrollPane;
    private javax.swing.JLabel commandingOfficerLabel;
    private javax.swing.JLabel cutterLabel;
    private javax.swing.JScrollPane deckJScrollPane;
    private javax.swing.JTable deckTable;
    private javax.swing.JScrollPane engineeringJScrollPane;
    private javax.swing.JTable engineeringTable;
    private javax.swing.JScrollPane executiveOfficerJScrollPane;
    private javax.swing.JLabel executiveOfficerLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lastScanLabel;
    private javax.swing.JLabel lastScanNameLabel;
    private javax.swing.JLabel lastScanTimeLabel;
    private javax.swing.JButton logsButton;
    private javax.swing.JButton managerUsersButton;
    private javax.swing.JToggleButton nightModeToggle;
    private javax.swing.JLabel numberAfloat;
    private javax.swing.JScrollPane officersJScrollPane;
    private javax.swing.JLabel officersLabel;
    private javax.swing.JTable officersTable;
    private javax.swing.JScrollPane operationsJScrollPane;
    private javax.swing.JTable operationsTable;
    private javax.swing.JScrollPane supportJScrollPane;
    private javax.swing.JScrollPane supportJScrollPane1;
    private javax.swing.JTable supportTable;
    private javax.swing.JTable tdyTable;
    private javax.swing.JLabel timeLabel;
    private javax.swing.JTable xoTable;
    // End of variables declaration//GEN-END:variables

    private void setupTablesLAF() {
        for (int i = 0; i < 9; i++) {
            JTable temp = getTable(i);
            temp.setAutoResizeMode(0);
            temp.setOpaque(false);
            temp.setShowGrid(false);
            temp.setDefaultRenderer(Boolean.class, new BooleanRenderer());
            temp.setDefaultRenderer(String.class, new StringRenderer());
            ((DefaultTableCellRenderer) temp.getDefaultRenderer(Object.class)).setOpaque(false);

            DefaultTableColumnModel colModel = (DefaultTableColumnModel) temp.getColumnModel();
            TableColumn col;
            col = colModel.getColumn(0);
            col.setPreferredWidth(0);
            col.setWidth(0);

            col = colModel.getColumn(1);
            col.setMinWidth(40);
            col.setPreferredWidth(40);
            col.setWidth(40);

            col = colModel.getColumn(2);
            col.setMinWidth(80);
            col.setPreferredWidth(80);
            col.setWidth(80);
            col.sizeWidthToFit();
        }
    }

    private void setupColors() {
        if (settings.getNightMode()) {
            backgroundColor = Color.BLACK;
            foregroundColor = Color.WHITE;
        } else {
            backgroundColor = UIManager.getColor("Panel.background");
            foregroundColor = Color.BLACK;
        }

        this.getContentPane().setBackground(backgroundColor);
        jPanel1.setBackground(backgroundColor);

        for (Component comp : jPanel1.getComponents()) {
            if (comp instanceof JScrollPane) {
                ((JScrollPane) comp).getViewport().setBackground(backgroundColor);
            } else if (comp instanceof JLabel) {
                ((JLabel) comp).setForeground(foregroundColor);
            } else if (comp instanceof JButton) {
                ((JButton) comp).setBackground(backgroundColor);
                ((JButton) comp).setForeground(foregroundColor);
            } else if (comp instanceof JToggleButton) {
                ((JToggleButton) comp).setBackground(backgroundColor);
                ((JToggleButton) comp).setForeground(foregroundColor);
            }
        }
        lastScanNameLabel.setForeground(lastScanColor);
    }

    @Override
    public boolean dispatchKeyEvent(KeyEvent e) {
        // Don't capture teh keys if the add/edit user dialog is displayed
        if (jdg.isVisible()) {
            return false;
        }
        switch (e.getID()) {
            case KeyEvent.KEY_PRESSED:
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    if (keyInput.toString().matches("[A-Za-z0-9]+") && keyInput.length() == 18) {
                        // Alphanumeric string that is 18 characters long, assume it's a barcode and process it
                        CrewMemberObject cm = DB.getMemberByBarcode(keyInput.toString());
                        if (cm.getId() != 0) {
                            // a non-zero value indicates that the CrewMemberObject had the id and status filled by the db call.
                            DB.toggleCrewMemberStatusByScanner(cm, cm.isStatus());
                            refreshDeptTable(cm.getDepartment());
                            lastScanNameLabel.setText(cm.getRank() + " " + cm.getLastName());
                            Date date = new Date();
                            SimpleDateFormat sdf = new SimpleDateFormat("HH:mm:ss");
                            lastScanTimeLabel.setText(" @ " + sdf.format(date));
                            // Reverse logic on the cm.isStatus() as it is being toggled above
                            if (cm.isStatus()) {
                                lastScanColor = Color.RED;
                                lastScanNameLabel.setForeground(lastScanColor);
                                //lastScanNameLabel.setOpaque(true);
                            } else {
                                lastScanColor = Color.GREEN;
                                lastScanNameLabel.setForeground(lastScanColor);
                                //lastScanNameLabel.setOpaque(true);
                            }
                        } else {
                            displayAddEditUser();
                            aem.setBarcodeText(keyInput.toString());
                        }
                    }
                    keyInput = new StringBuilder();
                    initialKeyEventTime = 0;
                } else if ((e.getKeyCode() >= 48 && e.getKeyCode() <= 57) || (e.getKeyCode() >= 65 && e.getKeyCode() <= 90) || (e.getKeyCode() >= 97 && e.getKeyCode() <= 122)) {
                    //only store alphanumeric values, anything else is jibberish
                    // Setup a threshold to prevent accidental keypresses from interfering with the card reader's input. 
                    // If the time is greather than the threshold erase any existing input and start over.
                    if ((System.currentTimeMillis() - initialKeyEventTime) > scannerTimeThreshold) {
                        initialKeyEventTime = System.currentTimeMillis();
                        keyInput = new StringBuilder();
                        keyInput.append(e.getKeyChar());
                    } else {
                        keyInput.append(e.getKeyChar());
                    }
                }
                e.consume();
                return true;
            default:
                return false;
        }
    }

    private void displayAddEditUser() {
        aem = new AddEditMember(jdg);
        jdg.setAutoRequestFocus(true);
        jdg.setSize(300, 400);
        jdg.setResizable(false);
        jdg.add(aem);
        jdg.pack();
        jdg.setLocationRelativeTo(null);
        jdg.setVisible(true);
        jdg.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                jdg.dispose();
            }
        });
    }

    private void displayUserList() {
        if (jdg.isVisible()) {
            jdg.getContentPane().removeAll();
        }
        userList = new UserList(jdg);
        jdg.setAutoRequestFocus(true);
        jdg.setSize(280, 500);
        jdg.setResizable(false);
        jdg.add(userList);
        jdg.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                jdg.getContentPane().removeAll();
                jdg.dispose();
            }
        });
        jdg.setLocationRelativeTo(null);
        jdg.setVisible(true);
    }

    private void displayLogList() {
        if (jdg.isVisible()) {
            jdg.getContentPane().removeAll();
        }
        logsList = new LogsList(jdg);
        jdg.setAutoRequestFocus(true);
        jdg.setResizable(true);
        jdg.add(logsList);
        jdg.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                jdg.getContentPane().removeAll();
                jdg.dispose();
            }
        });
        jdg.pack();
        jdg.setLocationRelativeTo(null);
        jdg.setVisible(true);
    }

    public void refreshDeptTable(String dept) {
        getModel(dept).refreshRows();
        getModel(dept).fireTableDataChanged();
    }

    private CrewListModel getModel(String dept) {
        if (dept.equals(CON.getDepartmentByPos(0))) {
            return coModel;
        } else if (dept.equals(CON.getDepartmentByPos(1))) {
            return xoModel;
        } else if (dept.equals(CON.getDepartmentByPos(2))) {
            return officerModel;
        } else if (dept.equals(CON.getDepartmentByPos(3))) {
            return chiefModel;
        } else if (dept.equals(CON.getDepartmentByPos(4))) {
            return engineeringModel;
        } else if (dept.equals(CON.getDepartmentByPos(5))) {
            return operationsModel;
        } else if (dept.equals(CON.getDepartmentByPos(6))) {
            return deckModel;
        } else if (dept.equals(CON.getDepartmentByPos(7))) {
            return supportModel;
        } else if (dept.equals(CON.getDepartmentByPos(8))) {
            return tdyModel;
        }
        return null;
    }

    private JTable getTable(int pos) {
        switch (pos) {
            case 0:
                return coTable;
            case 1:
                return xoTable;
            case 2:
                return officersTable;
            case 3:
                return chiefsTable;
            case 4:
                return engineeringTable;
            case 5:
                return operationsTable;
            case 6:
                return deckTable;
            case 7:
                return supportTable;
            case 8:
                return tdyTable;
            default:
                return null;
        }
    }

    public void setNumberAfloatLabel(String text) {
        numberAfloat.setText(text);
    }

    public static class BooleanRenderer extends JLabel implements TableCellRenderer, UIResource {

        public BooleanRenderer() {
            setOpaque(true);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Boolean boolValue = (Boolean) value;
            if (boolValue == null) {
                setBackground(null);
            } else {
                if (!boolValue) {
                    this.setBackground(Color.RED);
                } else {
                    this.setBackground(Color.GREEN);
                }
            }
            CrewListModel c = (CrewListModel) table.getModel();
            this.setToolTipText(c.getLastScan(row));
            return this;
        }
    }

    public static class StringRenderer extends DefaultTableCellRenderer {

        public StringRenderer() {
            setOpaque(false);
        }

        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            Component c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
            c.setForeground(foregroundColor);
            return c;
        }
    }

}
